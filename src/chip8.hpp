#ifndef CHIP8_CHIP8_H
#define CHIP8_CHIP8_H

#include <cstdio>
#include <cstdint>
#include <chrono>
#include <random>
#include <SDL2/SDL.h>

namespace config
{
    constexpr int VIDEO_WIDTH    = 64;
    constexpr int VIDEO_HEIGHT   = 32;

    constexpr int DISPLAY_SCALE  = 20;
    constexpr int DISPLAY_WIDTH  = VIDEO_WIDTH  * DISPLAY_SCALE;
    constexpr int DISPLAY_HEIGHT = VIDEO_HEIGHT * DISPLAY_SCALE;

    constexpr int DISPLAY_PITCH  = VIDEO_WIDTH  * sizeof(uint32_t);
}

class Chip8
{
    public:
        Chip8();
        ~Chip8();

    protected:
        void Initialize();

        uint8_t  memory[4096]; // 4K Memory
        uint8_t  V[16];        // REGISTERS: V0 -> V15 (V16 is carry)

        uint16_t I;            // INDEX Register
        uint16_t pc;           // Program counter

        uint16_t delayTimer;   // Game event timer    -> 60 Hz
        uint16_t soundTimer;   // Sound effects timer -> 60 Hz

        uint16_t stack[16];    // 16 Level stack
        uint16_t sp;           // Stack pointer
        uint16_t opcode;       // Opcodes pointer (35 in total)

        uint8_t  keyPad[16];   // HEX based keypad  (0x0 -> 0xF)

        uint32_t gfx[config::VIDEO_WIDTH * config::VIDEO_HEIGHT];  // RESOLUTION: 64 x 32 (2048 pixels)

        std::default_random_engine randSeed;                       // Random number gen seed
        std::uniform_int_distribution<unsigned char> randByte;     // Holds a randomly generated byte
};

#endif //CHIP8_CHIP8_H
